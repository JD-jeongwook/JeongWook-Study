유튜브 강의 4강 - Spring Dispatcher를 Front 컨트롤러로 설정하기

maven 사이트에서 spring web mvc 최신버전의 dependency를 가져와서 pom.xml파일에 설정해준다.

pom.xml의 Dependency Hierarchy를 보면 받은 dependency와 
spring이 해당 dependency를 사용하기 위해 필요한 다른 dependency를 다운로드 받은것을 볼수있다.

프로젝트 --> Java Resources --> Libraries --> Maven Dependecies --> spring-webmvc --> 
	org.springframework.web.servlet --> DespatcherServlet.class를 우클릭해서
Copy Qualified name 을 누른다. 해당 클래스의 패키지까지 복사가 된다.

해당 Servlet 클래스가 Front 컨트롤러 역할을 한다.

유튜브 강의 5강 - Dispatcher-servlet.xml

web.xml에 다음과 같은 코드를 추가해주어야한다.

  <servlet>
  	<servlet-name>dispatcher</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	<!-- 지난 시간에 복사한 DispatcherServlet을 붙혀넣는다. .class는 지워준다. -->
  </servlet>
  <servlet-mapping> 
  	<servlet-name>dispatcher</servlet-name>
  	<!-- Servlet을 사용자 요청이 가능하게하는 mapping을 지정해준다. -->
  	<url-pattern>/*</url-pattern>
  	<!-- / 를 시작하는 모든 URL을 받겠다는 뜻 -->
  </servlet-mapping>

그 다음 index.jsp를 실행을 하면 dispatcher-servlet을 찾을수없다는 오류가 나타난다.

WEB_INF 폴더 안에 (지정해준 servlet-name)-servlet.xml 파일을 하나 생성해 주어야한다.

유튜브 강의 6강 - IndexController 작성하기

https://docs.spring.io/spring-framework/docs 에 가면 springframework 의 버전을 볼수있다
사용중인 버전을 클릭하고 spring-framework-ref 를 클릭한다. 그 다음 core를 클릭하고
왼쪽의 카테고리중 The IoC Container를 클릭해준다.

그리고 밑으로 내리다보면

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="..." class="...">  
        <!-- collaborators and configuration for this bean go here -->
    </bean>
</beans>

라는 코드가 나온다. 해당 내용을 복사해서 아까 만들어준 dispatcher-servlet.xml 파일에 붙여넣어준다.
그리고 다음과 같이 수정해준다.

    <bean id="/index" class="com.newlecture.web.controller.IndexController">
     	<!-- /index url요청이오면 IndexController를 객체화해서 호출해준다. -->
    </bean>


public class IndexController implements Controller {
// Controller클ㄹ래스는 Contoller 인터페이스를 구현해야한다.
	
	@Override
	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {

		ModelAndView mv = new ModelAndView();
		mv.addObject("data", "Hello Spring MVC~");
//		ModelAndView 에 data라는 이름으로 Hello Spring MVC~ 를 저장한다.
		
		mv.setViewName("index.jsp");
//		ModelAndView 를 Dispatcher로 보내고, Dispatcher가 index.jsp를 찾아준다.
		
		return mv;
	}
//	모든 컨트롤러는 Dispatcher가 정의해놓은 함수를 약속해야한다.( handleRequest )
	
}

그리고 index.jsp파일에
<h1>HI ${data}</h1> 처럼 el문으로 data를 받게했다.


주소요청을 하게되면 톰캣이 모르는 POJO 클래스이다보니까 주소요청을 클래스가 아닌 소스코드를 반환해서 오류가 난다.
그렇기때문에 주소를 http://localhost:8080/webprj/WEB-INF/classes/com/newlecture/web/controller/IndexController.java에서
 http://localhost:8080/webprj/index로 바꿔준다.
하지만 그래도 오류가 날것이다.

web.xml 에서 설정해준
<url-pattern>/*</url-pattern> 를 /* --> / 로 *을 지워준다.
DispatcherServlet을 거치긴 하지만 해당 Dispatcher가 가진 리소스를 찾다가 없는것들은
그냥 직접 리소스를 요청하게 해준다.

그렇게 돼면 /index 를 호출할때 

index.jsp 에 미리 지정해준 <h1>HI ${data}</h1> 를 통해

HI 와 Contoller에서 data에 지정해준 값인 Hello Spring MVC~ 가 화면에 출력되는것을 볼 수 있다.