유튜브 강의 3강 - Maven으로 자바 프로젝트 생성하기

C:파일위치>mvn archetype:generate -DgroupId=com.newlecture -DartifactId=javaprj -DarchetypeArtifactId=maven-archetype-quickstart

구분자 -D
archetype:generate = archetype를 생성하다.

archetypeArtifactId=maven-archetype-quickstart  = 다른 사람이 만든 maven-archetype-quickstart라는 프로젝트 구조를 기반으로. ( 다른 템플릿이 있다면 그것을 사용해도된다. )

artifactId=javaprj  = 이번에는 내가 javaprj 라는 새로운 프로젝트를 생성한다. ( javaprj는 변경가능 )

groupId=com.newlecture = 그 때 내 프로젝트를 식별하기 위한 그룹명은 com.newlecture로 한다. ( com.newlecture는 변경가능 )

엔터를 치면 Define value for property 'version' 1.0-SNAPSHOT: 이라는 문구가 나오는데
SNAPSHOT 은 현재 개발중이라는것을 알릴때 사용한다. 만약 완성된  버젼이면 1.0 , 2.0 이런식으로 버젼을 변경가능하다.

버전을 지정하고 난 후 Y: 라는 질문이 나온다.
그것은 위에서 지정한 groupId 를 패키지 명으로 지정해줄거냐고 물어보는것이다.

4강 - Maven 프로젝트 컴파일과 실행

프로젝트를 컴파일 할때 반드시 pom.xml이 있는 디렉터리에서 maven관련된 명령어를 이용해야한다.

pom.xml이 있는 디렉터리에서 mvn compile을 하면 컴파일이 된다.
만약 jdk 버전문제로 오류가 난다면 pom.xml파일에
<properties>
	<maven.compiler.source>1.8</maven.compiler.source> // 컴파일을 1.8버전으로 되게한다.
	<maven.compiler.target>1.8</maven.compiler.target> // 대상을 최소 1.8이상 버전에서 실행되도록 컴파일한다는 뜻
<properties>
을 추가하면된다.

mvn package를 하게되면, target폴더에 jar파일로 해당 프로젝트를 만들어준다.

jar파일로 실행하는 방법 ) C:파일위치>java -cp target\jar파일이름 패키지.클래스 
ex) java -cp target\javaprj-1.0-SNAPSHOT.jar com.newlecture.App

com.newlecture.App : 실행하고 싶은 클래스

javaprj-1.0-SNAPSHOT.jar : 클래스가 사용하는 라이브러리

-cp target\ : -cp (classpath) 로 target폴더를 클래스패스로 등록한다

5강 - Maven의 Build Lifecycle

Maven의 일반적인 수행단계 ( Phases ) : compile --> test --> package --> install --> deploy ( 이 외에도 여러 단계가 있다.)
실행시킨 단계의 전단계도 모두 실행시킨다.
ex) mvn install == compile,test,package,install 이 실행이된다.

기본으로 맵핑되있는 단계들
process-resources , complie , process-test-resources , test-complie , test , package가 있다.
이 단계를 실행할 때 사용하는 프로그램을 Plug-in 이라고 한다.

Plug-in이 없는 단계도 pom.xml 파일에서 연결해줄 수 있다. ( 있는것도 뺄 수 있다. )
Plug-in은 내부적으로 구성하는 프로그램들이 또 작게 나뉘어져 있다. 이 프로그램을 Goal 이라고 한다.

Phase( 단계 ) 를 실행 - Phase(단계)를 실행하는 실질적은 프로그램이 Plug-in ( Plug-in 기본값이 없으면 xml파일에서 추가해주어야한다. )

C:파일위치>mvn help:describe -Dcmd=compile
해당 프로젝트를 컴파일하는데에 있어서 필요한 Plug-in을 볼 수 있다.

maven.apache.org 사이트를 가서 Maven Plugins 를 보게되면 Maven에서 지원하는 Plug-in을 볼수있다.

6강 - 이클립스로 Maven 프로젝트 임포트하기

이클립스에서 File - import - Maven폴더 - Existing Maven Projects 

기존에 있는 Maven 프로젝트를 Eclipse 기능을 입혀서 사용할 수 있게 해준다.

이를 통해 Build툴인 Maven을 IDE인 Eclipse를 통해 더욱 효율적으로 사용할 수 있다.

7강 - 컴파일러 플러그인과 JDK 버전 변경

이클립스에서 pom.xml 파일을 업데이트 했을때는 
프로젝트 우클릭 --> Maven --> Update Project를 해주는 것이 좋다.

JDK 버전을 변경하는법
pom.xml에서 밑의 코드를 입력
  <build>
  	<plugins>
  		<plugin>
  			<artifactId>maven-compiler-plugin</artifactId>
  			<version>3.8.1</version>
  			<configuration>
  				<source>1.8</source>
  				<target>1.8</target>
  			</configuration>
  		</plugin>
  	</plugins>
  </build>

위에서 사용한 
<properties>
	<maven.compiler.source>1.8</maven.compiler.source>
	<maven.compiler.target>1.8</maven.compiler.target>
<properties>
를 사용해도 무방하다.

CMD에서 mvn archetype:generate 를 입력하게되면
maven을 통해 사용할 수 있는 모든 archetype을 볼 수 있다.
해당 번호를 입력하면 그 archetype을 쓸 수 있고, 만약 입력하지 않는다면
기본 archetype인 maven-archetype-quickstart를 사용할 수 있다. ( 위에서 쓴거 )