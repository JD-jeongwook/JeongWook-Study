데이터와 연산 강의 1~2

컴퓨터가 다룰 수 있는 데이터
 - 숫자 ( Number )
 - 문자 ( String ) 
 - 영상,소리.. 기타 등등

컴퓨터의 데이터를 구분하는 이유
 - 각각의 데이터마다 데이터의 특성에 맞는 처리방식이 존재하기때문
 ex ) 숫자 : + - * / 등등..
       문자 : length,substring,search 등등..

- 소스코드 및 주석

public class Data {

	public static void main(String[] args) {
		System.out.println(6); // Number
		System.out.println("six"); // String
		
		// 숫자와 문자를 표현하는데 사용하는 기호가 다르다.
		System.out.println("6"); // String
		// 데이터타입별로 처리방식이 다르기 때문에 구분을 잘 지어줘야한다.
		
		System.out.println(6+6); // Number + Number 로 12가 된다.
		System.out.println("6"+"6"); // 문자 + 문자로 66 이된다.(숫자 개념이 아니기때문이다.)
		
		System.out.println(6*6); // Number * Number 로 36이 된다.
//		System.out.println("6"*"6"); // 문자*문자는 불가능하기 때문에 에러가 뜬다.
		
		System.out.println("1111".length()); // 문자 "1111"에 대한 길이를 알려주는 메소드이다. length()
//		System.out.println(1111.length()); // 숫자 1111에 대한 길이를 알려주는 메소드는 따로 없다.	
	}
}

1. 내가 지금 사용하는 시스템에는 어떤 종류의 데이터타입이 존재하는가를 알아야한다.

2. 각각의 데이터 타입별로 어떤 연산방법들이 존재하는가를 알아야한다.

숫자와 연산 강의 1

- 소스코드 및 주석
public class Number {
	public static void main(String[] args) {
		// 사칙연산
		// 연산자 (Operator)
		System.out.println(6 + 2); // 6 + 2 = 8
		System.out.println(6 - 2); // 6 - 2 = 4
		System.out.println(6 * 2); // 6 x 2 = 12
		// 곱하기 기호가 따로없기때문에(x는 문자) * 를 사용한다
		System.out.println(6 / 2); // 6 / 2 = 3
		// 나누기 기호가 따로없기때문에 /를 사용한다.
		
		//Math클래스 각종 수학과 관련된 메소드들이 있는 클래스이다.
		System.out.println(Math.PI); // 원주율을 나타내는 Math클래스의 메소드이다.
		System.out.println(Math.floor(Math.PI)); //(floor / 바닥) 소숫점을 내림시켜주는 Math클래스의 메소드이다.
		System.out.println(Math.ceil(Math.PI)); //(ceil / 천장) 소숫점을 올림시켜주는 Math클래스의 메소드이다.
		System.out.println(Math.round(Math.PI)); // 소숫점을 반올림시켜주는 Math클래스의 메소드이다.
	}
}

문자열 다루기 강의 1~2

- 소스코드 및 주석
public class StringApp {

	public static void main(String[] args) {
		System.out.println("Hello World"); // String(문자열) "" 를 사용한다.
//		System.out.println('Hello World'); // Character(문자) '' 를 사용한다. 한글자만 표현해야하기때문에 Hello World는 오류가 난다.
		System.out.println('H'); // 한글자이기때문에 ''를 사용해도 오류가 나지않는다.
		
		// String을 사용하면서 겪을 수 있는문제
		
		//줄바꿈
		System.out.println("Hello"
				+ " World"); // Enter키 인식X
		
		System.out.println("Hello \nWorld"); // \n == new line이라는 뜻으로 줄바꿈을 해준다.
		
		// ""가 들어가있는 텍스트
//		System.out.println("Hello "World""); // ""는 문자의 시작과 끝을 알리는 기호기때문에 "" 와 "" 사이에있는 World는 인식이 불가능하게 되면서 오류가 난다.
		System.out.println("Hello \"World\""); // \" 는 뒤에 있는 " 를 역할에서 해방시켜준다. 이러한 기능을 escape라고 한다.		
	}
}

- 소스코드 및 주속

public class StringOperation {

	public static void main(String[] args) {
		// 코딩은 어려운 작업이기 때문에 극단적인 사고를 하는게 좋다.
		// Hello World 라는 글자의 글자수를 1억글자라고 생각해보자
		System.out.println("Hello World".length()); // 1억글자의 글자수를 가지고있는 "Hello World"의 글자수를 알 수 있다.
		
		System.out.println("Hello, jeongwook ... bye.".replace("jeongwook", "yeongji"));
		// replace라는 메소드로 "Hello, jeongwook ... bye."의 jeongwook 을 yeongji로 바꿔주었다.
	}
}




















