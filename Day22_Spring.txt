유튜브 강의 13강 - @Autowired의 동작방식 이해와 @Qualifier 사용하기

@Autowired 는 Injection의 기능이다.

ex )

InlineExamConsole 클래스의 메소드

@Autowired
public void setExam(Exam exam) {
	this.exam = exam;
}

와

setting.xml 파일의 설정

<bean id="console" class="ui.InlineExamConsole">
	<property name="exam" ref="exam">
</bean>

은 같다.

@Autowired 가 exam객체를 찾는 기준을 찾기위해 실험을 해봤다.
( namespace 창을 추가하는법을 아직 못찾아서 okky에 질문을 올려놨다. 그래서 유튜브로 본 실험으로 대신 필기 )

<bean id="exam1" class="spring.di.entity.NewlecExam"> 처럼
bean의 id를 변경해도 @Autowired 어노테이션이 setExam 메소드를 잘 찾아가는것을 알 수 있다.
그래서 exam객체를 찾는 기준이 bean의 id는 아니다.

<bean class="spring.di.entity.NewlecExam" p:kor="10" eng="10">
<bean class="spring.di.entity.NewlecExam" p:kor="20" eng="20">

처럼 bean의 id를 지정해주지않고 2개의 객체를 생성하면 @Autowired가 2개를 감당할 수 없다는 ? 오류가 뜬다

하지만

<bean id="exam" class="spring.di.entity.NewlecExam" p:kor="10" eng="10">
<bean class="spring.di.entity.NewlecExam" p:kor="20" eng="20">

이럴때 id를 지정해주면 @Autowired가 위의 객체를 따라서 Program.java를 실행시켜준다.

만약 2개 이상의 객체가 아래처럼 아이디가 다른경우

<bean id="exam1" class="spring.di.entity.NewlecExam" p:kor="10" eng="10">
<bean id="exam2" class="spring.di.entity.NewlecExam" p:kor="20" eng="20">

아이디를 통해 연결할 객체를 찾아주는 어노테이션은
@Qualifier("객체의 아이디") 이다

ex)

@Autowired
@Qualifier("exam2")
@Override
public void setExam(Exam exam) {
	this.exam = exam;
}

실행결과 각각 국어 20 영어 20 이 들어가서 exam2 객체로 잘 실행되는것을 볼 수 있다.

유튜브 강의 14강 - @Autowired의 위치와 Required 옵션

@Autowired를 사용할 수 있는 위치는
setter메소드 앞, 필드 위, override된 생성자 앞에 사용 할 수 있다.

setter메소드 앞과 필드위에 @Autowired 를 사용하는것의 차이점은

setter메소드 앞 : setter함수가 호출되면서 Injection이 됨.

필드위 : 기본생성자를 호출하면서 Injection이 됨 ( 기본생성자가 없다면 실행이 불가능하다. 하지만 오버라이드 생성자가 없다면, 기본 생성자는 자동으로 생성되기 때문에 실행이 가능하다. )

override된 생성자 앞에 @Qualifier()를 붙이면 오류가 난다.
@Autowired
@Qualifier("exam2")
public InlineExamConsole(Exam exam) {
	this.exam = exam
}

그 이유는 Exam이 1개가 아닌 여러개가 들어갈 수 있다고 프로그램이 인식하기 때문이다.
해결방법은 
@Autowired
public InlineExamConsole(@Qualifier("exam2")Exam exam) {
	this.exam = exam
}
처럼 파라미터에 직접 인식을 시켜주는것이다.

보통 @Autowired는 필드위에 사용한다고 한다.

@Autowired 를 사용할 때 객체가 없으면 오류가 난다.
하지만 객체가 없이도 실행이 되게 하고싶다.
예를 들면
public void print() {
	if(exam == null)
		System.out.println("exam이 없습니다.");
	else 
		System.out.printf("total is %d, avg is %f\n", exam.total(), exam.avg());
}
를 실행하고 싶을때 사용하는 @Autowired의 옵션이 있다.
@Autowired(required = false) 를 사용하면 된다.
객체가 없을때도 일단 실행을 도와준다.