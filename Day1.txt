
프레임워크란 ?
 - 뼈대나 근간을 이루는 코드들의 묶음이다. / 프로그래밍에서 특정 운영 체제를 위한 응용 프로그램 표준 구조를 구현하는 클래스와 라이브러리의 모임

스프링의 특징
 - 복잡하지않게 경량화된 프레임워크이다.
 - 프로젝트의 전체 구조를 설계할 때 유용한 프레임워크이다.
 - 특정한 영역의 프레임워크와 공존하는 방식으로 사용할 수 있다.
 - DI를 지원하여 객체간의 의존관계 설정이 가능하다.
 - POJO 방식으로 자바객체는 특정한 인터페이스를 구현하고 클래스 상속이 필요하지 않다. 
 - API 연동을 지원한다.
 - 편리한 MVC 구조
 - AOP 지원
 - WAS의 종속적이지 않은 개발 환경을 가지고 있다.

POJO란 ?
 - Plain Old Java Object 의 약자
 - Java코드로 객체를 구성하는 방식을 스프링에서 사용가능
 - 개발자가 라이브러리나 컨테이너의 기술에 종속적이지 않고, 가장 일반적인 형태로 코드를 작성할수 있기 때문에 생산성에서 유리해진다.

DI란 ?
 - Dependency Injection ( 의존성 주입 )의 약자
 - 어떤 객체가 필요한 객체를 외부에서 주입해주는것.
 - 스프링은 'ApplicationContext' 라는 존재가 필요한 객체들을 생성 및 주입하는 역할을 해 주는 구조이다.
 - 'ApplicationContext' 가 관리하는 객체들을 'Bean' 이라고 부른다.
 - 'Bean' 과 'Bean' 사이의 의존관계를 처리하는 방식으로는 XML 설정, Annotation 설정 , Java 설정 방식등을 이용할 수 있다.

AOP의 지원
 - Aspect-Oriented-Programming 의 약자
 - 스프링에서 제공하는 반복적인 코드를 줄이고 핵심 비지니스 로직에만 집중할 수 있는 방법
 - 횡단 관심사( cross-concern ) : 대부분의 시스템이 가지고 있는 보안이나 로그, 트랜잭션과 같이 비즈니스 로직은 아니지만, 반드시 처리가 필요한 부분.
 - AOP는 이러한 횡단 관심사를 모듈로 분리하는 프로그래밍의 패러다임이다.
 - 이를 통해 얻는 장점 3가지
      1) 핵심 비즈니스 로직에만 집중해서 코드를 개발할 수 있다.
      2) 각 프로젝트마다 다른 관심사를 적용할 때 코드의 수정을 최소화시킬 수 있다.
      3) 원하는 관심사의 유지보수가 수월한 코드를 구성할 수 있다.

트랜잭션이란 ?
 - 하나의 작업을 수행하기 위해 필요한 데이터베이스의 연산을 모아놓은것.
 - 스프링은 Annotation 이나 XML 로 트랜잭션의 관리를 설정할 수 있다
 - 그로 인해 개발자가 매번 상황에 맞는 코드를 작성할 필요가 없다.