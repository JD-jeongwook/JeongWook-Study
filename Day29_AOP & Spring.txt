유튜브 강의 8강 - 간소화된 Advisor

Advisor중에는 PointCut의 기능을 내재하고 있는 Advisor가 있다.
결합된 Advisor 를 사용하여 코드를 간소화해보자.

- 수정 전

	<bean id="classicPointCut" class="org.springframework.aop.support.NameMatchMethodPointcut">
		<property name="mappedName" value="total" />
	</bean>
	<bean id="classBeforeAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="logBeforeAdvice" />
		<property name="pointcut" ref="classicPointCut" />
	</bean>

- 수정 후

	<bean id="classBeforeAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
		<property name="advice" ref="logBeforeAdvice" />
		<property name="mappedName" value="total"/>
	</bean>

NameMatchMethodPointcut를 통해 PointCut을 생성하고 DefaultPointcutAdvisor를 통해 
advice와 pointcut을 결합시켜주던 부분을
NameMatchMethodPointcutAdvisor라는 advisor를 통해 하나로 묶어주는 작업을 했다.

	<bean id="classAroundAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
		<property name="advice" ref="logAroundAdvice" />
		<property name="mappedNames">
			<list>
				<value>total</value>
				<value>avg</value>
			</list>
		</property>
	</bean>

처럼 advice를 호출할 함수를 mappedNames 를 이용해서 여러개를 지정할 수 있다. 또는

	<bean id="classAroundAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<property name="advice" ref="logAroundAdvice" />
		<property name="patterns" >
			<list>
				<value>.*to.*</value>
				<!-- 타겟의 메소드중 to가 들어가는 모든 함수를 호출 -->
			</list>
		</property>
	</bean>

처럼 패턴을 사용해서 지정할수있다.

유튜브강의 Spring MVC 강의 1강 - Spring MVC란 ?

모든 URL을 Dispatcher가 Servlet의 기본적인 입력도구를 이용해서 Controller에 자바형식으로 전달한다.
Servlet과 다르게 객체화된 데이터를 Controller로 전달할수있다.

servlet.xml 파일에서 <url-mapping> 정보를 디스패처 서블릿에 모두 보낸다.

예전에는 Dispatcher를 직접 만들었다. 하지만 요즘에는 Spring이 만들어준다.
스프링 DispatcherServlet 라이브러리를 사용한다.

유튜브강의 Spring MVC 강의 3강 - 빈 프로젝트 생성하기

Perspective를 Java EE로 설정 --> Maven Project 생성 --> 기존의 아키타입을 쓰지않고 비어있는 아키타입을 사용하기위해 simple project 체크 --> 그룹아이디와 프로젝트이름을 설정후 jar-->war 변경후 완료

생성후 pom.xml 에서 web.xml 이 없고, 일부러 없앤거면 설정을 해라 라는 에러가 나온다.
web.xml파일을 만들어주자.

프로젝트 --> src --> main --> webapp 안에 
저번에 메이븐에서 한것과 마찬가지로 tomcat 안에 있는 web.xml을 폴더째로 가져온다.
 ( C:\apache-tomcat-9.0.38\webapps\ROOT\WEB-INF 안에 있었다. )
그러면 에러가 사라졌다.

그 다음 pom.xml 에 Overview에 가서 Properties의 maven이 사용하는 컴파일러 버전을 바꿔준다.
maven.compiler.source(소스) 와 maven.compiler.target(대상) 을 각각 1.8 로 지정해주었다.

지난시간에 maven을 했을때와 마찬가지로 maven에 대한 작업을 했을때는 프로젝트 우클릭 --> maven --> Update Project를 해준다.

Java Resources --> Libraries 안에 JavaSE 가 1.8 버전으로 변경된것을 볼 수 있다.

jsp 파일을 하나 생성해주었다. 하지만 jsp관련 라이브러리를 추가해주지 않아서 에러가 발생하고있다.
maven강의 들을때와 마찬가지로 maven 사이트에 가서 tomcat 9.0.38 버전에 대한 dependency를 복사해서
pom.xml파일에 <dependencies> 안에 넣어준다. 오류가 해결이 됐다.