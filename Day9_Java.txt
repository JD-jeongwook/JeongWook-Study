유튜브 강의 자바문서 보는법 1~5

 1 ) API vs UI
API ( Application Programming Interface ) : 프로그램을 만들기 위해서 사용하는 조작 장치들, 조작 방법들
프로그램을 잘 만들기위해서는 API를 잘 다뤄야한다고 한다

UI ( User Interface ) : 사용자가 우리가 만든 프로그램을 조작하기 위해 사용하는 조작 장치들, 조작 방법들

우리가 만든 프로그램이 다른 프로그램에 사용이 된다면 우리가 만든 프로그램은 API가 되는것이다.

 2 ) 패키지,클래스,변수,메소드
 google에 api documentation java를 검색해서 맨위에 있는 사이트를 들어간다 (https://docs.oracle.com/javase/7/docs/api/)

 Java에서 기본적으로 제공되는 부품들 ( Library ) 들이 정리되어있다.
클래스를 검색했을때 class 검색한클래스이름 위에 있는것은 해당 클래스의 패키지이다. ex) class Math ( java.lang에 속한 클래스 )

클래스는 쉽게 말하면 서로 연관된 변수와 메소드라는것을 모아서 이름을 붙힌것이다.
패키지는 클래스들을 그룹으로 모아둔것이다.

 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ패키지ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|					           |
|       ㅡㅡㅡㅡㅡㅡㅡ각종 클래스ㅡㅡㅡㅡㅡㅡㅡㅡㅡ         |
|      |					|          |
|      |          ㅡㅡ각종 변수,메소드ㅡㅡ 		|          |
|      |          |                               |		|          |
|      |          ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ		|          |
|      |					|          |
|      ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ           |
|					           |
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

 3 ) 클래스 실습

public class ClassApp {
	public static void main(String[] args) {
		// Java는 수학과 관련된 작업을 할때 필요한 기본적인 공식을 제공한다. 해당 클래스가 Math이다.
		System.out.println(Math.PI); // Math라는 자바 기본클래스에 있는 PI 디렉토리를 출력한다.
		System.out.println(Math.floor(1.6)); // Math클래스에 floor디렉토리(소숫점 내림)을 출력한다.
		System.out.println(Math.ceil(1.6)); // Math클래스에 ceil디렉토리(소숫점 올림)을 출력한다.
	}
}

 4 ) 인스턴스

import java.io.FileNotFoundException;
import java.io.PrintWriter;

public class InstanceApp {

	public static void main(String[] args) throws FileNotFoundException {
		// FileNotFoundException 이라는 예외처리를 해준다 ( 파일을 찾을 수 없을떄 )
		
		PrintWriter p1 = new PrintWriter("result1.txt");
		// result1.txt 라는 파일에 출력을 할 클래스를 만들어서 p1이라는 인스턴스변수에 넣어준다.
		// PrintWriter : p1이라는 인스턴스를 해당 클래스로 규제
		// p1 : 생성자가 정의된 PrintWriter클래스를 담은 인스턴스 변수
		// new PrintWriter("result1.txt") : PrintWriter클래스의 생성자를 정의함
		
		p1.write("Hello 1"); // result1.txt. 파일에 Hello 1 이라고 입력한다.
		p1.close();
		
		PrintWriter p2 = new PrintWriter("result2.txt");
		p2.write("Hello 2");
		p2.close();
		
//		인스턴스는 클래스를 복제하는것이다.
//		인스턴스를 사용하는 이유 : 클래스에 직접 입력 시 동작이 많아지면 일일이 쓰는 불편함이 있다. 반복하는 작업 시 효과적으로 사용할 수 있다.
	
//		Constructor(생성자)
//		생성자가 있는 클래스는 인스턴스를 만드는것을 허용되어있다.
	}

}

 5 ) 상속

이클립스에서 해당 클래스의 상속관계를 알고싶으면
해당클래스 우클릭 -> Open type Hierarchy를 클릭한다.

모든 클래스는 Object클래스를 반드시 상속받는다.
어떠한 클래스를 상속받고싶으면 ' extends ' 를 사용한다.

ex ) FirstClass를 SecondClass에서 상속받고싶다면 class SecondClass extends FirstClass
만약 SecondClass.메소드() 를했을때, SecondClass에 해당 메소드가 없다면, 부모 클래스인 FirstClass에서 해당 메소드를 찾고,
FirstClass 에서도 없다면 그 부모클래스인 Object에서 찾는다. Object에서도 존재하지 않다면 오류가 난다.

만약 FirstClass와 SecondClass 가 같은 메소드가 있다면, 하위 클래스의 메소드를 사용해서 부모클래스의 메소드를 재정의한다. 이러한 과정을 ' 메소드 오버라이딩 ' 이라고 한다.
ex ) A클래스를 상속받고있는 B클래스가 A클래스의 a라는 메소드가 마음에 들지않는다. 그래서 a메소드를 B클래스에서 다시 만들어서 재정의 해준다.

Document사이트에서 Tree를 클릭하면 library에서 제공하는 클래스들의 상속관계를 볼수있다. 맨 위에는 Object 가 있다.