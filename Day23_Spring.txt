유튜브 강의 15강 - 어노테이션을 이용한 객체생성

xml에서 bean으로 객체생성하는것을 어노테이션을 이용해서 만드는 것으로 변경한다.

클래스 위에 @Component를 작성하면 해당클래스의 객체를 생성한다.

ex)
@Component
class Exam {
	@Autowired
	public void setExam(Exam exam) {
		this.exam = exam;
	}
}

하지만 그냥 사용하게 되면 오류가 난다.
xml에서 <context:component-scan base-package="패키지(ex. spring.di.ui)"/> 를 입력해주어야한다.
( <context:component-scan base-package="spring.di.ui, spring.di.entity"/> 처럼 2개이상의 패키지 지정도 가능 )
xml파일에서 설정하지 않았지만 "패키지(ex. spring.di.ui)"에 있는 클래스중 @Component가
있는 클래스를 찾고, 객체화 해달라고 스프링에게 명령해주는것이다.

context:component-scan 을 사용했을때 @Autowired도 읽기 때문에
<context:annotation-config/> 는 필요가 없어진다.

하지만 이렇게 해도 오류가 난다 왜냐하면 Program.java에서
ExamConsole console = (ExamConsole) context.getBean("console");
로 지정해 주어서 xml 에서 bean id로 지정해두었던 console이 사라졌기 때문이다. ( annotation으로 변경 )

오류 해결방법은
ExamConsole console = (ExamConsole) context.getBean(ExamConsole.class);
처럼 해당 인터페이스(ExamConsole)에 부합하는 객체가 있으면 생성해주도록 코드를 바꿔주거나

@Component를 지정해준곳에서 아이디를 지정해준다.
ex)
@Component("console")
class Exam {
	@Autowired
	public void setExam(Exam exam) {
		this.exam = exam;
	}	
}

유튜브 강의 16강 - @Component의 종류와 시멘틱 @Component

@Component로 생성한 객체에 기본값( value값 )을 지정해 주기위해서 쓰는 어노테이션이 있다.
해당 변수 위에 @Value("원하는값") 을 입력해 주는 것이다.

ex)
@Component
class NewlecExam implements Exam {
	
	@Value("20")
	private int kor;
	@Value("30")
	private int eng;
	private int math;
	private int com;

	public NewlecExam() {}
} kor과 eng의 값을 각각 20,30으로 지정해 준 것이다.

@Component의 종류
1. @Controller - 사용자의 입출력을 담당

2. @Service - 사용자의 요구사항에 맞는 서비스를 제공해준다.

3. @Repository(== Dao) - 서비스의 데이터를 제공받고있는곳

@Component를 사용해도 되지만 객체화 하려는 클래스의 역할을 정확히 명시해 주기위해 아래의 3개를 사용하는것이 더 바람직하다.

ex)
@Component
// @Controller
// @Service
// @Repository 3가지중 하나를 클래스의 역할에 맞게 @Component대신 사용
class Exam {
}