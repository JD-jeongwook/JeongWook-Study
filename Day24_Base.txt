JAVA의 특징
1. 자바가상머신 ( JVM / Java Virtual Machine ) 만 있으면 컴퓨터의 운영체제에 상관없이 작동한다.
2. 기본 자료형을 제외한 모든 요소들이 객체로 표현된다.
3. 객체 지향 개념의 특징인 캡슐화,상속,다형성이 잘 적용된 언어이다.
( 캡슐화에 대해 설명해 달라고 하셔서, 클래스를 쪼개서 보안성을 높히는 것 이라고 대답했는데
  보안성에 대해 설명해달라고 하셨다. 대답하지 못했다.. )
4. 가비지 콜렉터가 자동으로 메모리 관리를 해준다.
5. 멀티 쓰레드를 지원 ( OOP의 4대특징을 물어보셔서 이거를 대답했는데 틀렸다.. )

OOP ( 객체지향프로그래밍 / Object-Oriented Programming )
데이터를 객체로 취급해서 프로그램에 반영한것이다. 순차적으로 작동하는 기존의 프로그래밍 방식과 다르게,
객체와 객체의 상호작용을 통해 프로그램이 동작하는 것을 말한다.

OOP의 특징
1. 객체지향 프로그래밍은 코드의 재사용성이 높다.
2. 코드의 변경이 용이
3. 직관적인 코드분석
4. 개발속도 향상
5. 상속을 통한 장점 극대화

Object
 Oject( 객체 ) 는 OOP에서 데이터(변수)와 그 데이터에 관련되는 동작 ( 함수 ). 즉 절차 , 방법 , 기능을 모두 포함한 개념.
 모든 클래스의 최상위 클래스

Overloading 과 Overriding의 차이점
( 이거는 처음배울때 바짝외워놔서 물어보셨을 때 쉽게 대답했다. )
Overloading
 - 매개변수의 타입이 다르거나 개수가 다른, 같은 이름의 메소드를 여러개 정의하는것이다.

Overriding
 - 상속에서 나온 개념으로, 상위 클래스의 메소드를 하위 클래스에서 재정의 하는것을 의미한다.

Servlet이란?
 - Container가 이해할 수 있게 구성된 순수 자바 코드로만 이루어진 것 ( 자바속의 Html )

JSP ( Java Server Page )란 ?
 - Html 기반에 JAVA 코드를 블록화하여 삽입한것 ( Html 속의 자바 )

JDBC ( Java DataBase Connection ) 
 - Java언어를 통해 데이터 베이스에 접근 할 수 있는 프로그래밍을 의미

Get방식
 - 클라이언트에서 서버로 데이터를 전달할 때 , 주소 뒤에 이름과 값이 결합된 스트링형태로 전달하기 때문에
   보안성에 있어서 떨어지게 된다.
 - 길이에 제한이 있다.( == 전송 데이터의 한계가 있다. )
 - Post 방식보다 상대적으로 전송 속도가 빠르다.

Post방식
 - 데이터의 크기가 일정크기 이상일때 사용한다.
 - 서버로 보내기 전에 인코딩하고, 전송 후에는 서버에서 다시 디코딩 작업을 한다.
  ( 인코딩 (Encoding) : 문자를 코드로 변환하는 방식 )
  ( 디코딩 (Decoding) : 반대로 코드를 문자로 변환하는 방식 )
 - 주소창에 전송하는 데이터의 정보가 노출되지 않아서 Get방식볻 보안성이 높다.
 - 하지만 Get방식보다 속도는 느리다.
 - 문자열 데이터 뿐만 아니라, 라디오 버튼, 텍스트 박스 같은 객체들의 값도 전송가능하다.
   ex ) <input type="radio" name="test" value="test1"> 를  post방식으로 보내면 test1이라는 값이 전송된다.

MVC란 ?
 - 사용자 인터페이스를 성공적이고 효과적으로 데이터 모형에 관련 시키기 위한 방법론 또는 설계 방식중 하나이다.
 - MVC패턴의 목적은 코드의 재사용에 유용한 것은 물론, 사용자 인터페이스와 응용프로그램 개발에 소요되는 시간을
   현저하게 줄여주는 형식이라고 많은 개발자들이 평가하고있다.

 MVC 구성요소
 Model - 비지니스 처리를 해주는 로직부분
 View - 사용자에게 보여지는 Interface 부분
 Controller - Model과 View를 연결하여 클래스간 정보 교환을 하는데 사용

 MVC와 MVVM의 차이
  ( 오늘 필기문제에 나왔는데 MVVM을 몰라서 적지못했다.. )
MVVM ( Model View ViewModel ) 
 - ViewModel 즉 View를 나태주기 위한 Model이라고 생각하면된다.
 - MVVM의 가장 큰 장점은 Command와 Data Binding으로 View와의 의전성을 완벽히 분리할 수 있다는 장점이 있다.
 
 Interface
 - 일종의 추상 클래스이다.
 - 오직 추상메서드와 상수만을 멤버로 갖는다.
 - Implement 키워드를 사용. ( 사용하기 위해서는 하위클래스에서 구현해야한다.  )
 - 상속관계가 없는 클래스간에 서로 공통되는 로직을 구현하여 사용가능하게 한다.
 - Extends는 하나의 클래스만 상속이 가능하지만, Interface는 다중상속이 가능하다.
 - new 연산자로 인스턴스 생성이 불가능하다.
 - 메서드 선언만 가능하고, 사용은 불가능하다.
 
 가비지 컬렉션 ( Garbage Collection )
 - 시스템에서 더이상 사용하지 않는 동적 할당된 메모리 블럭을 찾아 자동으로 다시 사용가능한 자원으로 회수하는 것으로
   시스템에서 가비지컬렉션을 수행하는 부분을 가비지 컬렉터라 부른다.

 ( 가비지 컬렉터의 생명주기에 대해 물어보셨는데 대답하지 못했다. / 구글링해도 나오지않는다.. Okky에 물어봐야겠다) 

 Stack
 - LIFO (Last in First Out)의 후입선출 구조
 - push(); 를 이용한 데이터입력, pop(); 을 이용한 데이터출력
 - 삽입과 삭제가 일어나는 위치는 top.
 
 Queue
 - FIFO ( First in First Out)의 선입선출 구조
 - enQueue();를 이용한 데이터 입력, deQueue();를 이용한 데이터 출력
 
이것도 적지 못했다.

AOP ( Aspect-Oriented Programming / 관점 지향 프로그래밍 ) 
 객체 지향 프로그래밍에서 기능별로 class를 분리했음에도 로그,트랜젝션 처럼 공통적으로 반복되는 중복 코드가 발생하는
 단점을 해결하고자 나온 방식이다. ( Spring )
( 알고있었는데 잊어서 대답하지 못했다. )

DI ( Dependency Injection )
 Dependency는 도구, Injection은 그것을 결합해주는 과정으로, DI는 도구를 결합해주는 과정이고,
 xml과 어노테이션이 있다고 말씀드렸다.

Annotation이란?
 - 사전적의미는 주석이라는 뜻이다. 프로그램에게 추가적인 정보를 제공해주는 메타데이터라고 볼 수 있다.
 - 컴파일러가 특정 오류를 억제하도록 지시하는 것과 같이 프로그램 코드의 일부가 아닌 프로그램에서 관한 데이터를 제공한다.
 - 코드에 정보를 추가하는 정형화된 방법이다.

( 이것도 대답하긴했는데.. 골뱅이 붙혀서 사용하는거, DI방식중 하나라고 대답했다. )
 