유튜브 강의 17강 - Java Configuration

xml 파일 자체를 java 파일로 바꿀것이다.

<?xml version="1.0" encoding="UTF-8"?>
<bean xmlns="http://www.springframework.org/schema/beans" ..>
	1 : <context:componet-scan base-package="spring.di.ui" />
	2 : <bean id="exam" class="spring.di.entity.NewlecExam">
</beans>

1 : @ComponentScan("spring.di.ui")
// 만약 2개의 패키지를 지정하고 싶으면 @ComponentScan({"spring.di.entity","spring.di.ui"}) 처럼 배열형식으로 사용
@Configuration( 일반적인 자바클래스가 아닌, 설정을 위한 자바클래스라는 것을 표시해줌 )
public class NewlecAppConfig {
	2 : @Bean
	public Exam exam() { // NewlecExam이라는 객체가 컨테이너에 exam이라는 이름으로 담긴다.
		return new NewlecExam();
	}
}

ApplicationContext 생성하기.
ApplicationContext context = new AnnotationConfigApplicationContext(NewlecDIConfig.class);
// 어노테이션으로 DI할떄 생성하는 방법.

context.register 라는 함수로 여러개의 config파일을 설정할 수 있다.

유튜브 강의 1강 - AOP란 ?

AOP ( Aspect Oriented Programming / 관점지향프로그래밍 )

Primary Concern 과 Cross-cutting Concern

Core Concern 이 아닌 Cross-cutting Concern을 사용하는것이 AOP이다.
설명이 너무 어려워서 네이버 블로그로 찾아봤다.

네이버 블로그 [출처] AOP (Aspect-Oriented Programming)|작성자 Aurochs

횡단 관심사(흩어진 관심사,cross-cutting concern)의 분리를 허용함으로써, 모듈성을 증가시키는 것이 목적인 프로그래밍 패러다임이다.
코드 그 자체를 수정하지 않는 대신 기존의 코드에 추가 동작을 추가함으로써 수행하며, "함수의 이름이 'set'으로 시작하면 모든 함수 호출을 기록한다" 와 같이 어느 코드가 포인트컷 (pointcut) 사양을 통해 수정되는지를 따로 지정한다.
이를 통해 기능의 코드 핵심부를 어수선하게 채우지 않고도 비즈니스 로직에 핵심적이지 않은 동작들을 프로그램에 추가할 수 있게 한다.
어떤 로직을 기준으로 핵심적인 관점, 부가적인 관점으로 나누어서 보고 그 관점을 기준으로 각각 모듈화하겠다는 것이다.
AOP에서 각 관점을 기준으로 로직을 모듈화한다는 것은 코드들을 부분적으로 나누어서 모듈화 하겠다는 의미이다.
이때, 소스코드상에서 다른 부분에 계속 반복해서 쓰는 코드들을 발견할 수 있는 데 이것을 Cross-cutting Concerns 라 부른다.

유튜브 설명에 의하면 사용자가 사이트를 사용할때 생기는 로직이 핵심적인 관점, 
개발자와 운영자가 하는 로그처리,보안처리,트랜잭션처리가 부가적인 관점인듯하다.

AOP의 주요 개념
Aspect : 흩어진 관심사를 모듈화 한 것. 주로 부가기능을 모듈화함.
Target : Aspect를 적용하는 곳 ( 클래스, 메서드 등 )
Advice : 실질적으로 어떤 일을 해야할 지에 대한 것, 실질적인 부가기능을 담은 구현체
JoinPoint : Advice가 적용될 위치, 끼어들 수 있는 지점. 메서드 진입 지점, 생성자 호출 지점, 필드에서 값을 꺼내올 때 등 다양한 시점에 적용가능
PointCut : JoinPoint의 상세한 스펙을 정의한 것. 'A란 메서드의 진입 시점에 호출할 것' 과 같이 더욱 구체적으로 Advice가 실행될 지점을 정할 수 있음

스프링 AOP의 특징
1. 프록시 패턴 기반의 AOP 구현체, 프록시 객체를 쓰는 이유는 접근 제어 및 부가기능을 추가하기 위해서임
2. 스프링 빈에만 AOP를 적용 가능
3. 모든 AOP기능을 제공하는 것이 아닌 스프링 IoC와 연동하여 엔터프라이즈 애플리케이션에서 가장 흔한 문제(중복코드, 프록시 클래스 작성의 번거로움, 객체들 간 관계 복잡도 증가 등 ) 에 대한 해결책을 지원하는 것이 목적


모듈화란 ?
어떤 큰 문제를 해결하려고 할 때 그대로 놓고 해결하는 것은 매우 어려운 일이다. 따라서 일반적으로 큰 문제를 작은 단위로 쪼개어 그것을 하나씩 해결한다. 소프트웨어 개발에서도 마찬가지이다. 가장 먼저 하는 작업이 실제로 개발할 수 있는 작은 단위로 나누는 것이다. 이렇게 작은 단위로 나누는 것을 '모듈화'라고 한다.
[네이버 지식백과] 모듈화 (쉽게 배우는 소프트웨어 공학, 2015. 11. 30., 김치수)
